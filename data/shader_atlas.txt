//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
// FORWARD
singlelight basic.vs singlelight.fs
multilight basic.vs multilight.fs
shadowmap basic.vs shadowmap.fs
normals basic.vs normals.fs
uvs basic.vs uvs.fs
// DEFERRED
gbuffers basic.vs gbuffers.fs
deferred quad.vs deferred.fs
// SSAO
ssao quad.vs ssao.fs
ssao_plus quad.vs ssao_plus.fs
ssao_blur quad.vs ssao_blur.fs
// HDR
tonemapping quad.vs tonemapping.fs
//PROBE
probe basic.vs probe.fs
irradiance quad.vs irradiance.fs
//SKYBOX
skybox basic.vs skybox.fs

\normal_func
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

// assume N, the interpolated vertex normal and 
// WP the world position
//vec3 normal_pixel = texture2D( normalmap, uv ).xyz; 
vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

\getConeFactor

float getConeFactor (vec3 L)
{
	float spot_cosine = dot(u_light_direction, -L);
	if (u_light_cone_exp.z > spot_cosine)
		return 0.0;
	return pow(spot_cosine, u_light_cone_exp.y);
}

\PBR

// Fresnel term with scalar optimization(f90=1)
float F_Schlickf90( const in float VoH, const in float f0, float f90)
{
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (f90 - f0) * f;
}

// Fresnel term with colorized fresnel
vec3 F_Schlick( const in float VoH, const in vec3 f0)
{
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (vec3(1.0) - f0) * f;
}

#define RECIPROCAL_PI 0.3183098861837697

// Diffuse Reflections: Disney BRDF using retro-reflections using F term, this is much more complex!!
float Fd_Burley ( const in float NoV, const in float NoL, const in float LoH, const in float linearRoughness)
{
        float f90 = 0.5 + 2.0 * linearRoughness * LoH * LoH;
        float lightScatter = F_Schlickf90(NoL, 1.0, f90);
        float viewScatter  = F_Schlickf90(NoV, 1.0, f90);
        return lightScatter * viewScatter * RECIPROCAL_PI;
}

const float PI = 3.141592;
// Normal Distribution Function using GGX Distribution
float D_GGX (	const in float NoH, const in float linearRoughness )
{
	float a2 = linearRoughness * linearRoughness;
	float f = (NoH * NoH) * (a2 - 1.0) + 1.0;
	return a2 / (PI * f * f);
}

// Geometry Term: Geometry masking/shadowing due to microfacets
float GGX(float NdotV, float k){
	return NdotV / (NdotV * (1.0 - k) + k);
}
	
float G_Smith( float NdotV, float NdotL, float roughness)
{
	float k = pow(roughness + 1.0, 2.0) / 8.0;
	return GGX(NdotL, k) * GGX(NdotV, k);
}

//this is the cook torrance specular reflection model
vec3 specularBRDF( float roughness, vec3 f0, float NoH, float NoV, float NoL, float LoH )
{
	float a = roughness * roughness;

	// Normal Distribution Function
	float D = D_GGX( NoH, a );

	// Fresnel Function
	vec3 F = F_Schlick( LoH, f0 );

	// Visibility Function (shadowing/masking)
	float G = G_Smith( NoV, NoL, roughness );

	// Norm factor
	vec3 spec = D * G * F;
	spec /= (4.0 * NoL * NoV + 1e-6);

	return spec;
}

\linear_space

vec3 degamma(vec3 c) { return pow(c,vec3(2.2)); }

vec3 gamma(vec3 c){ return pow(c,vec3(1.0/2.2)); }

\SH

const float Pi = 3.141592654;
const float CosineA0 = Pi;
const float CosineA1 = (2.0 * Pi) / 3.0;
const float CosineA2 = Pi * 0.25;
struct SH9 { float c[9]; }; //to store weights
struct SH9Color { vec3 c[9]; }; //to store colors

void SHCosineLobe(in vec3 dir, out SH9 sh) //SH9
{
	// Band 0
	sh.c[0] = 0.282095 * CosineA0;
	// Band 1
	sh.c[1] = 0.488603 * dir.y * CosineA1; 
	sh.c[2] = 0.488603 * dir.z * CosineA1;
	sh.c[3] = 0.488603 * dir.x * CosineA1;
	// Band 2
	sh.c[4] = 1.092548 * dir.x * dir.y * CosineA2;
	sh.c[5] = 1.092548 * dir.y * dir.z * CosineA2;
	sh.c[6] = 0.315392 * (3.0 * dir.z * dir.z - 1.0) * CosineA2;
	sh.c[7] = 1.092548 * dir.x * dir.z * CosineA2;
	sh.c[8] = 0.546274 * (dir.x * dir.x - dir.y * dir.y) * CosineA2;
}

vec3 ComputeSHIrradiance(in vec3 normal, in SH9Color sh)
{
	// Compute the cosine lobe in SH, oriented about the normal direction
	SH9 shCosine;
	SHCosineLobe(normal, shCosine);
	// Compute the SH dot product to get irradiance
	vec3 irradiance = vec3(0.0);
	for(int i = 0; i < 9; ++i)
		irradiance += sh.c[i] * shCosine.c[i];

	return irradiance;
}


\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}

\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	if( n == 0.0 && f == 1.0)
		FragColor = vec4(z);
	else
		FragColor = vec4( n * (z + 1.0) / (f + n - z * (f - n)));
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\normals.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec3 u_camera_pos;
uniform sampler2D u_texture_normals;

out vec4 FragColor;

#include "normal_func"

void main()
{
	vec2 uv = v_uv;
	vec3 normal_pixel = texture2D( u_texture_normals, uv ).xyz;

	vec3 N = normalize( v_normal );
	if (normal_pixel != vec3(0,0,0))
	{
		N = perturbNormal(N, v_world_position, v_uv, normal_pixel);
	}

	FragColor = vec4( abs(N), 1.0 );
}

\uvs.fs

#version 330 core

in vec2 v_uv;

out vec4 FragColor;

void main()
{
	FragColor = vec4( v_uv, 1.0, 1.0 );
}

\shadowmap.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec4 color = texture(u_texture, v_uv);

	//Check blending
	if (color.a < u_alpha_cutoff)
		discard;

	FragColor = vec4(1.0);
}

\testShadowmap

uniform sampler2D u_light_shadowmap;
uniform mat4 u_shadow_viewproj;
uniform int u_light_cast_shadows;
uniform float u_light_shadowbias;

float testShadowmap(vec3 pos)
{
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_shadow_viewproj * vec4(pos, 1.0);

	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 ){
      	if (u_light_type == 2) {return 1.0;}
		else {return 0.0;}
	}

	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_light_shadowbias) / proj_pos.w;

	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0)
		return 1.0;

	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture( u_light_shadowmap, shadow_uv).x;

	//compute final shadow factor by comparing
	float shadow_factor = 1.0;

	//we can compare them, even if they are not linear
	if( shadow_depth < real_depth )
		shadow_factor = 0.0;

	return shadow_factor; 
}

\singlelight.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_emissive;

const int MAX_LIGHTS = 10;

uniform vec3 u_ambient_light;
uniform vec3 u_light_position[MAX_LIGHTS];
uniform vec3 u_light_color[MAX_LIGHTS];
uniform vec3 u_light_direction[MAX_LIGHTS];

uniform float u_light_max_dist[MAX_LIGHTS];
uniform float u_light_intensity[MAX_LIGHTS];
uniform float u_light_cutoff[MAX_LIGHTS];
uniform float u_light_cone_exp[MAX_LIGHTS];

uniform int u_light_type[MAX_LIGHTS];
uniform int u_num_lights;

uniform sampler2D u_emissive_texture;
uniform sampler2D u_texture_metallic_roughness;
uniform sampler2D u_texture_normals;

#include "normal_func"

#define POINT 0
#define SPOT 1
#define DIRECTIONAL 2

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(0.0);
	light += u_ambient_light;

	vec3 N = normalize( v_normal );
	
	//Emissive
	vec4 emissive = vec4( u_emissive, 1.0);
	vec4 emissive_color = texture(u_emissive_texture, v_uv);
	emissive *= emissive_color;

	for (int i = 0; i < MAX_LIGHTS; ++i)
	{
		if (i < u_num_lights)
		{
			if (u_light_type[i] == 2) //DIRECTIONAL
			{
				vec3 L = normalize(-u_light_direction[i]);

				float NdotL = clamp(dot(N,L), 0.0, 1.0);

				light += (NdotL * u_light_color[i]) * u_light_intensity[i];
			}
			else
			{
				vec3 L = u_light_position[i] - v_world_position;
				float light_dist = length(L);
				L = normalize(L);

				float att_factor = u_light_max_dist[i] - light_dist;
				att_factor /= u_light_max_dist[i];
				att_factor = max(att_factor, 0.0);
				att_factor *= pow(att_factor, 2.0);

				float NdotL = clamp(dot(N,L), 0.0, 1.0);

				if (u_light_type[i] == 0) //POINT
				{
					light += (NdotL * u_light_color[i]) * att_factor * u_light_intensity[i];
				}
				if (u_light_type[i] == 1) //SPOT
				{
					float cos_angle = dot(L, normalize(-u_light_direction[i]));

					if (cos_angle > u_light_cutoff[i])
					{
						float coneFactor = clamp(pow(cos_angle, u_light_cone_exp[i]), 0.0, 1.0);
						light += (NdotL * u_light_color[i]) * att_factor * u_light_intensity[i] * coneFactor;
					}
				}
			}
		}
	}
	color.xyz *= light;
	color.xyz += emissive.xyz;

	FragColor = color;
}


\multilight.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_camera_position;

uniform vec3 u_ambient_light;
uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform vec3 u_light_direction;

uniform float u_light_max_dist;
uniform float u_light_intensity;
uniform vec3 u_light_cone_exp;

uniform int u_light_type;

uniform sampler2D u_emissive_texture;
uniform sampler2D u_texture_normals;
uniform sampler2D u_roughness_texture;

uniform vec3 u_emissive;
uniform float u_roughness;
uniform float u_metallic;

uniform bool u_has_reflections;
uniform sampler2D u_reflections_texture;

out vec4 FragColor;

#define POINT 0
#define SPOT 1
#define DIRECTIONAL 2

#include "normal_func"
#include "getConeFactor"
#include "testShadowmap"
#include "PBR"

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(u_ambient_light);

	vec3 N = normalize( v_normal );
	vec3 L;

	//Emissive
	vec4 emissive = vec4( u_emissive, 1.0);
	vec4 emissive_color = texture(u_emissive_texture, v_uv);
	emissive *= emissive_color;

	float occlusion = texture(u_roughness_texture, v_uv).x;
	float roughness = texture(u_roughness_texture, v_uv).y;
	float metalness = texture(u_roughness_texture, v_uv).z;
	if (metalness == 1.0){ metalness = u_metallic;}
	if (roughness == 1.0){ roughness = u_roughness;}
	light *= occlusion;

	float shadow_factor = 1.0;
	float coneFactor = 1.0;
	float att_factor = 1.0;

	if (u_light_type == 2) //DIRECTIONAL
	{
		L = normalize(-u_light_direction);
		
		if (u_light_cast_shadows == 1)
		{
			shadow_factor = testShadowmap(v_world_position);
		}
	}
	else
	{
		L = u_light_position - v_world_position;
		float light_dist = length(L);
		L = normalize(L);

		att_factor = u_light_max_dist - light_dist;
		att_factor /= u_light_max_dist;
		att_factor = max(att_factor, 0.0);
		att_factor *= pow(att_factor, 2.0);

		if (u_light_type == 1) //SPOT
		{	
			L = normalize(u_light_position - v_world_position);
			if (u_light_cone_exp.z > 0)
			{
				float cos_angle = dot(normalize(u_light_direction), -L);
				if (cos_angle > u_light_cone_exp.z)
				{
					coneFactor = pow(cos_angle, u_light_cone_exp.y);

					if (u_light_cast_shadows == 1)
					{
						shadow_factor = testShadowmap(v_world_position);
					}
				} else {coneFactor = 0.0;}
			} 
		}
	}
	vec3 V = normalize(u_camera_position - v_world_position);
	vec3 H = normalize(L+V);

	float NoL = clamp(dot(N,L),0.0, 1.0);
	float NoH = clamp(dot(N,H),0.0, 1.0);
	float NoV = clamp(dot(N,V),0.0, 1.0);
	float LoH = clamp(dot(L,H),0.0, 1.0);

	//we compute the reflection in base to the color and the metalness
	vec3 f0 = mix( vec3(0.5), color.xyz, metalness );

	//metallic materials do not have diffuse
	vec3 diffuseColor = (1.0 - metalness) * color.xyz;

	//compute the specular
	vec3 Fr_d = specularBRDF( roughness, f0, NoH, NoV, NoL, LoH);

	// Here we use the Burley, but you can replace it by the Lambert.
	float linearRoughness = pow(roughness, 2.0);
	vec3 Fd_d = diffuseColor * Fd_Burley(NoV,NoL,LoH,linearRoughness); 

	//add diffuse and specular reflection
	vec3 direct = Fr_d + Fd_d;

	//compute how much light received the pixel
	vec3 lightParams = (NoL * u_light_color) * u_light_intensity * att_factor * shadow_factor * coneFactor;

	//modulate direct light by light received
	light += direct * lightParams;

	color.xyz *= light;
	color.xyz += emissive.xyz;

	FragColor = color;
}

\gbuffers.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform sampler2D u_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_texture_normals;
uniform sampler2D u_roughness_texture;

uniform vec3 u_emissive;
uniform float u_roughness;
uniform float u_metallic;

layout(location = 0) out vec4 GB0;
layout(location = 1) out vec4 GB1;
layout(location = 2) out vec4 GB2;

#include "normal_func"
#include "linear_space"

//from https://github.com/hughsk/glsl-dither/blob/master/4x4.glsl
float dither4x4(vec2 position, float brightness)
{
  int x = int(mod(position.x, 4.0));
  int y = int(mod(position.y, 4.0));
  int index = x + y * 4;
  float limit = 0.0;

  if (x < 8) {
    if (index == 0) limit = 0.0625;
    if (index == 1) limit = 0.5625;
    if (index == 2) limit = 0.1875;
    if (index == 3) limit = 0.6875;
    if (index == 4) limit = 0.8125;
    if (index == 5) limit = 0.3125;
    if (index == 6) limit = 0.9375;
    if (index == 7) limit = 0.4375;
    if (index == 8) limit = 0.25;
    if (index == 9) limit = 0.75;
    if (index == 10) limit = 0.125;
    if (index == 11) limit = 0.625;
    if (index == 12) limit = 1.0;
    if (index == 13) limit = 0.5;
    if (index == 14) limit = 0.875;
    if (index == 15) limit = 0.375;
  }

  return brightness < limit ? 0.0 : 1.0;
}

void main()
{
	vec3 N = normalize(v_normal);

	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture(u_texture, v_uv);

	if (color.a < u_alpha_cutoff && dither4x4(gl_FragCoord.xy, color.a) == 0.0)
		discard;

	vec3 emissive = u_emissive * texture(u_emissive_texture, v_uv).xyz;

	float occlusion = texture(u_roughness_texture, v_uv).x;
	float roughness = texture(u_roughness_texture, v_uv).y;
	float metalness = texture(u_roughness_texture, v_uv).z;
	if (metalness == 1.0){ metalness = u_metallic;}
	if (roughness == 1.0){ roughness = u_roughness;}

	GB0 = vec4(color.xyz, occlusion);
	GB1 = vec4(N * 0.5 + vec3(0.5), roughness);
	GB2 = vec4(emissive, metalness);
}

\deferred.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;
uniform sampler2D u_ssao_texture;

uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;

uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_ambient_light;
uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform vec3 u_camera_position;
uniform vec3 u_light_direction;
uniform vec3 u_light_cone_exp;
uniform float u_light_intensity;
uniform float u_light_max_dist;
uniform int u_light_type;

out vec4 FragColor;

#define POINT 0
#define SPOT 1
#define DIRECTIONAL 2

#include "getConeFactor"
#include "testShadowmap"
#include "PBR"
#include "linear_space"

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;
	
	//Color
	vec4 gb0_color = texture(u_gb0_texture, uv); //Color
	vec4 gb1_color = texture(u_gb1_texture, uv); //Normal
	vec4 gb2_color = texture(u_gb2_texture, uv); //Extra

	float depth = texture (u_depth_texture, uv).x;
	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 world_position = proj_worldpos.xyz / proj_worldpos.w;

	float ao_factor = texture(u_ssao_texture, uv).x;
	ao_factor = pow(ao_factor, 3.0);
	vec3 light = u_ambient_light;

	//Normal
	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));

	vec4 color = vec4(gb0_color.xyz, 1.0);
	if(color.a < u_alpha_cutoff)
		discard;

	//vec3 light = vec3(u_ambient_light);

	//float att_factor = u_light_max_dist - light_dist;
	vec3 L;
	float shadow_factor = 1.0;
	float coneFactor = 1.0;
	float att_factor = 1.0;

	if (u_light_type == 2) //DIRECTIONAL
	{
		L = normalize(-u_light_direction);
		
		if (u_light_cast_shadows == 1)
		{
			shadow_factor = testShadowmap(world_position);
		}
	}
	else
	{
		L = u_light_position - world_position;
		float light_dist = length(L);
		L = normalize(L);

		att_factor = u_light_max_dist - light_dist;
		att_factor /= u_light_max_dist;
		att_factor = max(att_factor, 0.0);
		att_factor *= pow(att_factor, 2.0);

		if (u_light_type == 1) //SPOT
		{	
			//L = normalize(u_light_position - world_position);
			if (u_light_cone_exp.z > 0)
			{
				float cos_angle = dot(normalize (u_light_direction), -L);
				//float cos_angle = dot(L, normalize(-u_light_direction));
				if (cos_angle >= u_light_cone_exp.z)
				{
					coneFactor = pow(cos_angle, u_light_cone_exp.y);

					if (u_light_cast_shadows == 1)
					{
						shadow_factor = testShadowmap(world_position);
					}
				} else {coneFactor = 0.0;}
			} 
		}
	}

	vec3 V = normalize(u_camera_position - world_position);
	vec3 H = normalize(L+V);

	float NoL = clamp(dot(N,L),0.0, 1.0);
	float NoH = clamp(dot(N,H),0.0, 1.0);
	float NoV = clamp(dot(N,V),0.0, 1.0);
	float LoH = clamp(dot(L,H),0.0, 1.0);

	//we compute the reflection in base to the color and the metalness
	vec3 f0 = mix( vec3(0.5), color.xyz, gb1_color.a );

	//metallic materials do not have diffuse
	vec3 diffuseColor = (1.0 - gb1_color.a) * color.xyz;

	//compute the specular
	vec3 Fr_d = specularBRDF( gb2_color.a, f0, NoH, NoV, NoL, LoH);

	// Here we use the Burley, but you can replace it by the Lambert.
	float linearRoughness = pow(gb2_color.a, 2.0);
	vec3 Fd_d = diffuseColor * Fd_Burley(NoV,NoL,LoH,linearRoughness); 

	//add diffuse and specular reflection
	vec3 direct = Fr_d + Fd_d;

	//compute how much light received the pixel
	vec3 lightParams = degamma(u_light_color) * u_light_intensity * att_factor * shadow_factor * coneFactor;

	//modulate direct light by light received
	light += direct * lightParams;

	//light += gb2_color.xyz;
	color.xyz *= light;
	color.xyz += degamma(gb2_color.xyz);

	FragColor = color;
}

\ssao.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_gb1_texture;
uniform sampler2D u_depth_texture;

uniform mat4 u_viewprojection;
uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;
uniform vec3 u_points[64];

out vec4 FragColor;

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;

	float depth = texture (u_depth_texture, uv).x;

	//ignore if pixels in the background
	if(depth >= 1.0)
	{
		FragColor = vec4(1.0);
		return;
	}

	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	//lets use 64 samples
	const int samples = 64;
	int num = samples; //num samples that passed the are outside

	//for every sample around the point
	for( int i = 0; i < samples; ++i )
	{
		//compute is world position using the random
		vec3 p = worldpos + u_points[i] * 10.0;
		//find the uv in the depth buffer of this point
		vec4 proj = u_viewprojection * vec4(p,1.0);
		proj.xy /= proj.w; //convert to clipspace from homogeneous
		//apply a tiny bias to its z before converting to clip-space
		proj.z = (proj.z - 0.005) / proj.w;
		proj.xyz = proj.xyz * 0.5 + vec3(0.5); //to [0..1]
		//read p true depth
		float pdepth = texture( u_depth_texture, proj.xy ).x;
		//compare true depth with its depth
		float diff = proj.z - pdepth;
		if( diff > 0.0 && diff < 0.001) //if true depth smaller, is inside
			num--; //remove this point from the list of visible
	}

	//finally, compute the AO factor as the ratio of visible points
	float ao = float(num) / float(samples);

	FragColor = vec4(ao);
}

\ssao_plus.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_gb1_texture;
uniform sampler2D u_depth_texture;

uniform mat4 u_viewprojection;
uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;
uniform vec3 u_points[64];

layout(location = 0) out vec4 FragColor;

#include "normal_func"

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;

	float depth = texture (u_depth_texture, uv).x;

	//ignore if pixels in the background
	if(depth >= 1.0)
	{
		FragColor = vec4(1.0);
		return;
	}

	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	//lets use 64 samples
	const int samples = 64;
	int num = samples; //num samples that passed the are outside

	//SSAO_PLUS
	vec4 gb1_color = texture(u_gb1_texture, uv); //Normal
	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));
	mat3 rotmat = cotangent_frame(gb1_color.xyz, worldpos, uv);

	//for every sample around the point
	for( int i = 0; i < samples; ++i )
	{
		//compute is world position using the random
		vec3 p = worldpos + u_points[i] * 10.0;
		//find the uv in the depth buffer of this point
		vec4 proj = u_viewprojection * vec4(p,1.0);
		proj.xy /= proj.w; //convert to clipspace from homogeneous
		//apply a tiny bias to its z before converting to clip-space
		proj.z = (proj.z - 0.005) / proj.w;
		proj.xyz = proj.xyz * 0.5 + vec3(0.5); //to [0..1]
		//read p true depth
		float pdepth = texture( u_depth_texture, proj.xy ).x;
		//compare true depth with its depth
		float diff = proj.z - pdepth;
		if( diff > 0.0 && diff < 0.001) //if true depth smaller, is inside
			num--; //remove this point from the list of visible
	}

	//finally, compute the AO factor as the ratio of visible points
	float ao = float(num) / float(samples);

	FragColor = vec4(ao);
}

\ssao_blur.fs

#version 330 core

in vec2 v_uv;
uniform sampler2D u_ssao_texture;
uniform float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

out vec4 FragColor;

void main() {
	
	 vec3 result = texture(u_ssao_texture, v_uv).rgb * weight[0];
	 vec2 size = 1.0 / textureSize(u_ssao_texture, 0);

	 for(int i = 1; i < 5; ++i){
            result += texture(u_ssao_texture, v_uv + vec2(size.x * i, 0.0)).rgb * weight[i];
            result += texture(u_ssao_texture, v_uv - vec2(size.x * i, 0.0)).rgb * weight[i];
	}
	FragColor = vec4(result, 1.0);
} 


\tonemapping.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;

uniform float u_scale;
uniform float u_average_lum;
uniform float u_lumwhite2;
uniform float u_igamma;

#include "linear_space"

void main() {
	vec4 color = texture2D( u_texture, v_uv );
	vec3 rgb = color.xyz;

	float lum = dot(rgb, vec3(0.2126, 0.7152, 0.0722));
	float L = (u_scale / u_average_lum) * lum;
	float Ld = (L * (1.0 + L / u_lumwhite2)) / (1.0 + L);

	rgb = (rgb / lum) * Ld;
	rgb = max(rgb,vec3(0.001));
	rgb = pow( rgb, vec3( u_igamma ) );
	gl_FragColor = vec4( rgb, color.a );
}

\probe.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec3 u_coeffs[9];

out vec4 FragColor;

#include "SH"

void main()
{
	SH9Color sh;
	sh.c[0] = u_coeffs[0];
	sh.c[1] = u_coeffs[1];
	sh.c[2] = u_coeffs[2];
	sh.c[3] = u_coeffs[3];
	sh.c[4] = u_coeffs[4];
	sh.c[5] = u_coeffs[5];
	sh.c[6] = u_coeffs[6];
	sh.c[7] = u_coeffs[7];
	sh.c[8] = u_coeffs[8];

	vec3 N = normalize(v_normal);
	vec3 irradiance = ComputeSHIrradiance( N, sh );
	FragColor = vec4(irradiance, 1.0);
}

\irradiance.fs

#version 330 core

uniform vec2 u_iRes;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_depth_texture;
uniform sampler2D u_irr_texture;

uniform mat4 u_inverse_viewprojection;
uniform mat4 u_viewprojection;

uniform vec3 u_irr_start;
uniform vec3 u_irr_end;
uniform vec3 u_irr_dims;

uniform float u_irr_normal_distance;
uniform float u_num_probes;
uniform vec3 u_irr_delta;

out vec4 FragColor;

#include "SH"

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;
	
	float depth = texture(u_depth_texture, uv).x;	
	vec4 gb1_color = texture(u_gb1_texture, uv);
	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));

	if(depth >= 1.0){
		FragColor = vec4(1.0);
		return;
	}

	vec4 screen_pos = vec4(uv.x * 2.0 - 1.0, uv.y * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 world_position = proj_worldpos.xyz / proj_worldpos.w;

	//computing nearest probe index based on world position
	vec3 irr_range = u_irr_end - u_irr_start; 
	vec3 irr_local_pos = clamp(world_position - u_irr_start + N * u_irr_normal_distance, vec3(0.0), irr_range);

	//convert from world pos to grid pos
	vec3 irr_norm_pos = irr_local_pos / u_irr_delta;

	//round values as we cannot fetch between rows for now
	vec3 local_indices = round(irr_norm_pos);

	//compute in which row is the probe stored
	float row = local_indices.x + local_indices.y * u_irr_dims.x + local_indices.z * u_irr_dims.x * u_irr_dims.y;

	//find the UV.y coord of that row in the probes texture
	float row_uv = (row + 1.0) / (u_num_probes + 1.0);

	SH9Color sh;

	//fill the coefficients
	const float d_uvx = 1.0 / 9.0;
	for(int i = 0; i < 9; i++) {
		vec2 coeffs_uv = vec2((float(i)+0.5) * d_uvx, row_uv);
		sh.c[i] = texture(u_irr_texture, coeffs_uv).xyz;
	}

	//now we can use the coefficients to compute the irradiance
	vec3 irradiance = ComputeSHIrradiance(N, sh);
	vec3 color = texture(u_gb0_texture, uv).xyz * irradiance;
	FragColor = vec4(color, 1.0);
}

\skybox.fs

#version 330 core

in vec3 v_world_position;

uniform samplerCube u_texture;
uniform vec3 u_camera_position;

out vec4 FragColor;

void main()
{
	vec3 V = v_world_position - u_camera_position;
	FragColor = texture(u_texture, V);
}

